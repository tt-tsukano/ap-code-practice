{
  "id": "r4s-q8",
  "title": "配列要素の選択ソート",
  "year": "2022",
  "season": "spring",
  "number": 8,
  "category": "algorithm",
  "difficulty": "intermediate",
  "estimatedTime": 25,
  
  "description": "配列の要素を昇順に並び替える選択ソートアルゴリズムについて、IPA擬似言語で書かれたプログラムの空欄を埋める問題です。選択ソートは、未ソート部分から最小値を選んで前方に移動させる基本的なソートアルゴリズムです。",
  
  "situation": "n個の整数が格納された配列arrayを昇順に並び替える処理を考える。選択ソートでは、配列の先頭から順に、残りの未ソート部分から最小値を見つけて現在位置と交換することで並び替えを行う。この操作をn-1回繰り返すことで、配列全体がソートされる。",
  
  "pseudoCode": "手続き selectionSort(配列:array, 整数:n)\n  整数:i, j, min_idx, temp\n  i を 0 から n-2 まで 1 ずつ増やす\n    min_idx ← i\n    j を ［　ア　］から n-1 まで 1 ずつ増やす\n      もし array[j] < array[min_idx] ならば\n        ［　イ　］\n      もし終わり\n    j の繰り返し終わり\n    もし ［　ウ　］ ならば\n      temp ← array[i]\n      array[i] ← array[min_idx]\n      array[min_idx] ← temp\n    もし終わり\n  i の繰り返し終わり\n手続き終わり",
  
  "blanks": [
    {
      "id": "blank_a",
      "position": 4,
      "type": "expression",
      "description": "内側ループの開始位置を指定する式",
      "options": [
        {
          "key": "ア",
          "value": "i+1",
          "description": "現在位置の次から検索開始（正解）"
        },
        {
          "key": "イ", 
          "value": "i",
          "description": "現在位置から検索開始"
        },
        {
          "key": "ウ",
          "value": "0",
          "description": "配列の先頭から検索開始"
        },
        {
          "key": "エ",
          "value": "1",
          "description": "配列の2番目から検索開始"
        }
      ],
      "correct": "ア",
      "explanation": "選択ソートでは、現在位置iより後の未ソート部分（i+1以降）から最小値を探すため、内側ループはi+1から開始する必要があります。現在位置iは既にソート済み部分との境界にあるため、i+1から検索を開始することで効率的に未ソート部分の最小値を見つけることができます。"
    },
    {
      "id": "blank_b", 
      "position": 6,
      "type": "statement",
      "description": "より小さい値が見つかった時の処理",
      "options": [
        {
          "key": "ア",
          "value": "temp ← array[j]",
          "description": "一時変数に現在の値を保存"
        },
        {
          "key": "イ",
          "value": "min_idx ← j",
          "description": "最小値のインデックスを更新（正解）"
        },
        {
          "key": "ウ",
          "value": "array[i] ← array[j]",
          "description": "直接値を交換"
        },
        {
          "key": "エ",
          "value": "j ← min_idx",
          "description": "ループ変数を更新"
        }
      ],
      "correct": "イ",
      "explanation": "array[j] < array[min_idx]の条件が成立した場合、より小さい値が見つかったことを意味するため、最小値のインデックスmin_idxをjに更新します。これにより、現在見つかっている最小値の位置を記録し、後で交換処理に使用します。"
    },
    {
      "id": "blank_c",
      "position": 10, 
      "type": "condition",
      "description": "要素交換が必要な条件",
      "options": [
        {
          "key": "ア",
          "value": "i < min_idx",
          "description": "現在位置が最小値位置より小さい場合"
        },
        {
          "key": "イ",
          "value": "i != min_idx",
          "description": "現在位置と最小値位置が異なる場合（正解）"
        },
        {
          "key": "ウ",
          "value": "array[i] > array[min_idx]",
          "description": "現在値が最小値より大きい場合"
        },
        {
          "key": "エ",
          "value": "min_idx > 0",
          "description": "最小値位置が0より大きい場合"
        }
      ],
      "correct": "イ",
      "explanation": "要素の交換は、現在位置iと最小値の位置min_idxが異なる場合にのみ必要です。i == min_idxの場合、現在位置に既に最小値があるため交換は不要です。この条件チェックにより、不要な交換処理を避けて効率を向上させることができます。"
    }
  ],
  
  "testCases": [
    {
      "id": "test_basic",
      "description": "基本的なケース：7個の要素を含む未ソート配列",
      "input": {
        "variables": {
          "array": [64, 34, 25, 12, 22, 11, 90],
          "n": 7
        },
        "description": "サイズ7の整数配列（重複なし、完全にランダム順序）"
      },
      "expected": {
        "output": [11, 12, 22, 25, 34, 64, 90],
        "description": "昇順にソートされた配列"
      }
    },
    {
      "id": "test_small",
      "description": "小さなケース：3個の要素（逆順）",
      "input": {
        "variables": {
          "array": [3, 2, 1],
          "n": 3
        },
        "description": "サイズ3の配列（完全に逆順）"
      },
      "expected": {
        "output": [1, 2, 3],
        "description": "昇順にソートされた配列"
      }
    },
    {
      "id": "test_duplicates",
      "description": "重複要素を含むケース",
      "input": {
        "variables": {
          "array": [5, 2, 8, 2, 9, 1, 5],
          "n": 7
        },
        "description": "重複要素を含むサイズ7の配列"
      },
      "expected": {
        "output": [1, 2, 2, 5, 5, 8, 9],
        "description": "重複要素も正しく処理された昇順配列"
      }
    },
    {
      "id": "test_sorted",
      "description": "既にソート済みのケース",
      "input": {
        "variables": {
          "array": [1, 2, 3, 4, 5],
          "n": 5
        },
        "description": "既に昇順にソート済みの配列"
      },
      "expected": {
        "output": [1, 2, 3, 4, 5],
        "description": "変更なしで同じ順序を維持"
      }
    },
    {
      "id": "test_single",
      "description": "単一要素のケース",
      "input": {
        "variables": {
          "array": [42],
          "n": 1
        },
        "description": "要素が1個のみの配列"
      },
      "expected": {
        "output": [42],
        "description": "単一要素なので変更なし"
      }
    }
  ],
  
  "explanation": "選択ソート（Selection Sort）は、最もシンプルなソートアルゴリズムの一つです。\n\n【アルゴリズムの動作原理】\n1. 配列を「ソート済み部分」と「未ソート部分」に分けて考える\n2. 未ソート部分から最小値を見つける\n3. 最小値を未ソート部分の先頭（現在位置）と交換する\n4. ソート済み部分を1つ拡張し、2-3を繰り返す\n\n【時間計算量】\n- 最良・平均・最悪ケース：O(n²)\n- 比較回数：n(n-1)/2回（約n²/2回）\n- 交換回数：最大n-1回\n\n【空間計算量】\n- O(1) - インプレース（追加メモリをほとんど使わない）\n\n【特徴】\n- 安定性：不安定（同じ値の相対位置が保たれない場合がある）\n- 実装の簡単さ：非常にシンプル\n- 交換回数が少ない：最大でもn-1回の交換\n- 小さなデータセットには適している\n\n【他のソートアルゴリズムとの比較】\n- バブルソート：隣接要素の交換、O(n²)だが交換回数が多い\n- 挿入ソート：ソート済み部分に挿入、平均的には選択ソートより高速\n- クイックソート：分割統治法、平均O(n log n)で高速\n- マージソート：分割統治法、常にO(n log n)で安定",
  
  "hints": [
    "選択ソートは「未ソート部分から最小値を選んで前に移動」するアルゴリズムです。現在どこからどこまでが未ソート部分なのかを意識してみましょう。",
    "内側のループ（j）では、外側のループの現在位置（i）より後ろの要素だけを調べる必要があります。なぜなら、i より前はすでにソート済みだからです。",
    "最小値を見つけるプロセスは「候補を更新していく」方式です。より小さい値が見つかったら、その位置を記録（min_idx を更新）します。",
    "要素の交換は「本当に必要な時だけ」行います。現在位置に既に最小値がある場合は交換不要です。この最適化により無駄な処理を避けられます。"
  ],
  
  "relatedTopics": [
    "配列操作",
    "ソートアルゴリズム", 
    "ループ処理",
    "変数交換",
    "計算量解析",
    "アルゴリズムの安定性",
    "インプレース・アルゴリズム",
    "比較ベースソート"
  ]
}